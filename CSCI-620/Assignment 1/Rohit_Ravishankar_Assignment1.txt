R Logs
=====================================================================================

savehistory(file = "/Users/rohitravishankar/Desktop/file.txt")
library(rattle)
rattle()
library(tibble)
install.packages("tibble")
savehistory(file="/Users/rohitravishankar/Desktop/file.txt")
library(rattle)
rattle()
dim(weather)
dim()
seq(1,50)
head(weather[1:9],2)
tail(weather[1:9],1)
weather[4:8, 2:4]
4:8
seq(4,8)
c(4,5,6,7,8)
help("dim")
help.search("dimensions")
RSiteSearch("dimensions")
print(crs$rpart, digits=1)
print(crs$rpart, digits=1)
library(rpart)
weatherDS <- new.env()
evalq({
data <- weather
nobs <- nrow(data)
vars <- c(2:22, 24)
form <- formula(RainTomorrow ~ .)
target <- all.vars(form)[1]
train <- sample(nobs, 0.7*nobs)
}, weatherDS)
weatherRPART <- new.env(parent=weatherDS)
evalq({
model <- rpart(formula=form, data=data[train, vars])
predictions <- predict(model, data[-train, vars])
}, weatherRPART)
save(weatherDS, file="weatherDS.Rdata")
load("weatherDS.Rdata")
attach(weatherRPART)
print(model)
detach(weatherRPART)
attach(weatherRPART)
new.model <- model
detach(weatherRPART)
savehistory("~/Desktop/file.Rhistory")







Rattle Logs
=====================================================================================

# Rattle is Copyright (c) 2006-2017 Togaware Pty Ltd.

#============================================================
# Rattle timestamp: 2018-01-29 18:05:44 x86_64-apple-darwin15.6.0 

# Rattle version 5.0.14 user 'rohitravishankar'

# This log file captures all Rattle interactions as R commands. 

# Export this log to a file using the Export button or the Tools menu to save a log 
# of all your activity. This facilitates repeatability. For example, exporting 
# to a file called 'myrf01.R' will allow you to type in the R Console 
# the command source('myrf01.R') and so repeat all actions automatically. 
# Generally, you will want to edit the file to suit your needs. You can also directly 
# edit this current log in place to record additional information before exporting. 
 
# Saving and loading projects also retains this log.

# We begin by loading the required libraries.

library(rattle)   # To access the weather dataset and utility commands.
library(magrittr) # For the %>% and %<>% operators.

# This log generally records the process of building a model. However, with very 
# little effort the log can be used to score a new dataset. The logical variable 
# 'building' is used to toggle between generating transformations, as when building 
# a model, and simply using the transformations, as when scoring a dataset.

building <- TRUE
scoring  <- ! building


# A pre-defined value is used to reset the random seed so that results are repeatable.

crv$seed <- 42 

#============================================================
# Rattle timestamp: 2018-01-29 18:05:51 x86_64-apple-darwin15.6.0 

# Load the data.

crs$dataset <- read.csv(system.file("csv", "weather.csv", package="rattle"), encoding="UTF-8")

#============================================================
# Rattle timestamp: 2018-01-29 18:05:51 x86_64-apple-darwin15.6.0 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 366 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 256 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 54 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 56 observations

# The following variable selections have been noted.

crs$input <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustDir", "WindGustSpeed", "WindDir9am",
     "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am",
     "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am",
     "Cloud3pm", "Temp9am", "Temp3pm", "RainToday")

crs$numeric <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm",
     "Humidity9am", "Humidity3pm", "Pressure9am", "Pressure3pm",
     "Cloud9am", "Cloud3pm", "Temp9am", "Temp3pm")

crs$categoric <- c("WindGustDir", "WindDir9am", "WindDir3pm", "RainToday")

crs$target  <- "RainTomorrow"
crs$risk    <- "RISK_MM"
crs$ident   <- "Date"
crs$ignore  <- "Location"
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2018-01-29 18:06:04 x86_64-apple-darwin15.6.0 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 366 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 256 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 54 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 56 observations

# The following variable selections have been noted.

crs$input <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustDir", "WindGustSpeed", "WindDir9am",
     "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am",
     "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am",
     "Cloud3pm", "Temp9am", "Temp3pm", "RainToday")

crs$numeric <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm",
     "Humidity9am", "Humidity3pm", "Pressure9am", "Pressure3pm",
     "Cloud9am", "Cloud3pm", "Temp9am", "Temp3pm")

crs$categoric <- c("WindGustDir", "WindDir9am", "WindDir3pm", "RainToday")

crs$target  <- "RainTomorrow"
crs$risk    <- "RISK_MM"
crs$ident   <- "Date"
crs$ignore  <- "Location"
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2018-01-29 18:06:08 x86_64-apple-darwin15.6.0 

# Scatter or Pairs Plot (Plot a Correlation Matrix) 

# The 'Deducer' package provides the 'ggcorplot' function.

library(Deducer, quietly=TRUE)

#============================================================
# Rattle timestamp: 2018-01-29 18:07:53 x86_64-apple-darwin15.6.0 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 366 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 256 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 54 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 56 observations

# The following variable selections have been noted.

crs$input <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustDir", "WindGustSpeed", "WindDir9am",
     "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am",
     "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am",
     "Cloud3pm", "Temp9am", "Temp3pm", "RainToday")

crs$numeric <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm",
     "Humidity9am", "Humidity3pm", "Pressure9am", "Pressure3pm",
     "Cloud9am", "Cloud3pm", "Temp9am", "Temp3pm")

crs$categoric <- c("WindGustDir", "WindDir9am", "WindDir3pm", "RainToday")

crs$target  <- "RainTomorrow"
crs$risk    <- "RISK_MM"
crs$ident   <- "Date"
crs$ignore  <- "Location"
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2018-01-29 18:07:59 x86_64-apple-darwin15.6.0 

# Decision Tree 

# The 'rpart' package provides the 'rpart' function.

library(rpart, quietly=TRUE)

# Reset the random number seed to obtain the same results each time.

set.seed(crv$seed)

# Build the Decision Tree model.

crs$rpart <- rpart(RainTomorrow ~ .,
    data=crs$dataset[crs$train, c(crs$input, crs$target)],
    method="class",
    parms=list(split="information"),
    control=rpart.control(usesurrogate=0, 
        maxsurrogate=0))

# Generate a textual view of the Decision Tree model.

print(crs$rpart)
printcp(crs$rpart)
cat("\n")

# Time taken: 0.03 secs

#============================================================
# Rattle timestamp: 2018-01-29 18:10:09 x86_64-apple-darwin15.6.0 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 366 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 256 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 54 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 56 observations

# The following variable selections have been noted.

crs$input <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustDir", "WindGustSpeed", "WindDir9am",
     "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am",
     "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am",
     "Cloud3pm", "Temp9am", "Temp3pm", "RainToday")

crs$numeric <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm",
     "Humidity9am", "Humidity3pm", "Pressure9am", "Pressure3pm",
     "Cloud9am", "Cloud3pm", "Temp9am", "Temp3pm")

crs$categoric <- c("WindGustDir", "WindDir9am", "WindDir3pm", "RainToday")

crs$target  <- "RainTomorrow"
crs$risk    <- "RISK_MM"
crs$ident   <- "Date"
crs$ignore  <- "Location"
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2018-01-29 18:10:20 x86_64-apple-darwin15.6.0 

# Decision Tree 

# The 'rpart' package provides the 'rpart' function.

library(rpart, quietly=TRUE)

# Reset the random number seed to obtain the same results each time.

set.seed(crv$seed)

# Build the Decision Tree model.

crs$rpart <- rpart(RainTomorrow ~ .,
    data=crs$dataset[crs$train, c(crs$input, crs$target)],
    method="class",
    parms=list(split="information"),
    control=rpart.control(usesurrogate=0, 
        maxsurrogate=0))

# Generate a textual view of the Decision Tree model.

print(crs$rpart)
printcp(crs$rpart)
cat("\n")

# Time taken: 0.01 secs

#============================================================
# Rattle timestamp: 2018-01-29 18:10:54 x86_64-apple-darwin15.6.0 

# Plot the resulting Decision Tree. 

# We use the rpart.plot package.

fancyRpartPlot(crs$rpart, main="Decision Tree weather.csv $ RainTomorrow")

# List the rules from the tree using a Rattle support function.

asRules(crs$rpart)

#============================================================
# Rattle timestamp: 2018-01-29 18:11:26 x86_64-apple-darwin15.6.0 

# Display box plots for the selected variables. 

# Use ggplot2 to generate box plot for MinTemp

# Generate a box plot.

p01 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::mutate(RainTomorrow=as.factor(RainTomorrow)) %>%
  ggplot2::ggplot(ggplot2::aes(y=MinTemp)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::geom_boxplot(ggplot2::aes(x=RainTomorrow, fill=RainTomorrow), notch=TRUE) +
  ggplot2::stat_summary(ggplot2::aes(x=RainTomorrow), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("RainTomorrow\n\nRattle 2018-Jan-29 18:11:26 rohitravishankar") +
  ggplot2::ggtitle("Distribution of MinTemp (sample)\nby RainTomorrow") +
  ggplot2::theme(legend.position="none")

# Use ggplot2 to generate box plot for Sunshine

# Generate a box plot.

p02 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::mutate(RainTomorrow=as.factor(RainTomorrow)) %>%
  ggplot2::ggplot(ggplot2::aes(y=Sunshine)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::geom_boxplot(ggplot2::aes(x=RainTomorrow, fill=RainTomorrow), notch=TRUE) +
  ggplot2::stat_summary(ggplot2::aes(x=RainTomorrow), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("RainTomorrow\n\nRattle 2018-Jan-29 18:11:26 rohitravishankar") +
  ggplot2::ggtitle("Distribution of Sunshine (sample)\nby RainTomorrow") +
  ggplot2::theme(legend.position="none")

# Display the plots.

gridExtra::grid.arrange(p01, p02)

#============================================================
# Rattle timestamp: 2018-01-29 18:11:36 x86_64-apple-darwin15.6.0 

# Display histogram plots for the selected variables. 

# Use ggplot2 to generate histogram plot for MinTemp

# Generate the plot.

p01 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::mutate(RainTomorrow=as.factor(RainTomorrow)) %>%
  dplyr::select(MinTemp, RainTomorrow) %>%
  ggplot2::ggplot(ggplot2::aes(x=MinTemp)) +
  ggplot2::geom_density(lty=3) +
  ggplot2::geom_density(ggplot2::aes(fill=RainTomorrow, colour=RainTomorrow), alpha=0.55) +
  ggplot2::xlab("MinTemp\n\nRattle 2018-Jan-29 18:11:36 rohitravishankar") +
  ggplot2::ggtitle("Distribution of MinTemp (sample)\nby RainTomorrow") +
  ggplot2::labs(fill="RainTomorrow", y="Density")

# Use ggplot2 to generate histogram plot for Sunshine

# Generate the plot.

p02 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::mutate(RainTomorrow=as.factor(RainTomorrow)) %>%
  dplyr::select(Sunshine, RainTomorrow) %>%
  ggplot2::ggplot(ggplot2::aes(x=Sunshine)) +
  ggplot2::geom_density(lty=3) +
  ggplot2::geom_density(ggplot2::aes(fill=RainTomorrow, colour=RainTomorrow), alpha=0.55) +
  ggplot2::xlab("Sunshine\n\nRattle 2018-Jan-29 18:11:36 rohitravishankar") +
  ggplot2::ggtitle("Distribution of Sunshine (sample)\nby RainTomorrow") +
  ggplot2::labs(fill="RainTomorrow", y="Density")

# Display the plots.

gridExtra::grid.arrange(p01, p02)

#============================================================
# Rattle timestamp: 2018-01-29 18:11:43 x86_64-apple-darwin15.6.0 

# Display histogram plots for the selected variables. 

# Use ggplot2 to generate histogram plot for MinTemp

# Generate the plot.

p01 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::select(MinTemp) %>%
  ggplot2::ggplot(ggplot2::aes(x=MinTemp)) +
  ggplot2::geom_density(lty=3) +
  ggplot2::xlab("MinTemp\n\nRattle 2018-Jan-29 18:11:43 rohitravishankar") +
  ggplot2::ggtitle("Distribution of MinTemp (sample)") +
  ggplot2::labs(y="Density")

# Use ggplot2 to generate histogram plot for Sunshine

# Generate the plot.

p02 <- crs %>%
  with(dataset[sample,]) %>%
  dplyr::select(Sunshine) %>%
  ggplot2::ggplot(ggplot2::aes(x=Sunshine)) +
  ggplot2::geom_density(lty=3) +
  ggplot2::xlab("Sunshine\n\nRattle 2018-Jan-29 18:11:43 rohitravishankar") +
  ggplot2::ggtitle("Distribution of Sunshine (sample)") +
  ggplot2::labs(y="Density")

# Display the plots.

gridExtra::grid.arrange(p01, p02)

#============================================================
# Rattle timestamp: 2018-01-29 18:11:51 x86_64-apple-darwin15.6.0 

# Display box plots for the selected variables. 

# Use ggplot2 to generate box plot for MinTemp

# Generate a box plot.

p01 <- crs %>%
  with(dataset[sample,]) %>%
  ggplot2::ggplot(ggplot2::aes(y=MinTemp)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("Rattle 2018-Jan-29 18:11:51 rohitravishankar") +
  ggplot2::ggtitle("Distribution of MinTemp (sample)") +
  ggplot2::theme(legend.position="none")

# Use ggplot2 to generate box plot for Sunshine

# Generate a box plot.

p02 <- crs %>%
  with(dataset[sample,]) %>%
  ggplot2::ggplot(ggplot2::aes(y=Sunshine)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("Rattle 2018-Jan-29 18:11:51 rohitravishankar") +
  ggplot2::ggtitle("Distribution of Sunshine (sample)") +
  ggplot2::theme(legend.position="none")

# Display the plots.

gridExtra::grid.arrange(p01, p02)

#============================================================
# Rattle timestamp: 2018-01-29 18:12:06 x86_64-apple-darwin15.6.0 

# Display box plots for the selected variables. 

# Use ggplot2 to generate box plot for MinTemp

# Generate a box plot.

p01 <- crs %>%
  with(dataset[sample,]) %>%
  ggplot2::ggplot(ggplot2::aes(y=MinTemp)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("Rattle 2018-Jan-29 18:12:06 rohitravishankar") +
  ggplot2::ggtitle("Distribution of MinTemp (sample)") +
  ggplot2::theme(legend.position="none")

# Use ggplot2 to generate box plot for Sunshine

# Generate a box plot.

p02 <- crs %>%
  with(dataset[sample,]) %>%
  ggplot2::ggplot(ggplot2::aes(y=Sunshine)) +
  ggplot2::geom_boxplot(ggplot2::aes(x="All"), notch=TRUE, fill="grey") +
  ggplot2::stat_summary(ggplot2::aes(x="All"), fun.y=mean, geom="point", shape=8) +
  ggplot2::xlab("Rattle 2018-Jan-29 18:12:06 rohitravishankar") +
  ggplot2::ggtitle("Distribution of Sunshine (sample)") +
  ggplot2::theme(legend.position="none")

# Display the plots.

gridExtra::grid.arrange(p01, p02)

#============================================================
# Rattle timestamp: 2018-01-29 18:12:48 x86_64-apple-darwin15.6.0 

# The 'gplots' package provides the 'barplot2' function.

library(gplots, quietly=TRUE)

#============================================================
# Rattle timestamp: 2018-01-29 18:12:48 x86_64-apple-darwin15.6.0 

# Bar Plot 

# Generate the summary data for plotting.

ds <- rbind(summary(na.omit(crs$dataset[crs$sample,]$WindDir9am)))

# Sort the entries.

ord <- order(ds[1,], decreasing=TRUE)

# Plot the data.

bp <-  barplot2(ds[,ord], beside=TRUE, ylab="Frequency", xlab="WindDir9am", ylim=c(0, 40), col=colorspace::rainbow_hcl(1))

# Add the actual frequencies.

text(bp, ds[,ord]+1, ds[,ord])

# Add a title to the plot.

title(main="Distribution of WindDir9am (sample)",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

#============================================================
# Rattle timestamp: 2018-01-29 18:13:01 x86_64-apple-darwin15.6.0 

# The 'gplots' package provides the 'barplot2' function.

library(gplots, quietly=TRUE)

#============================================================
# Rattle timestamp: 2018-01-29 18:13:01 x86_64-apple-darwin15.6.0 

# Bar Plot 

# Generate the summary data for plotting.

ds <- rbind(summary(na.omit(crs$dataset[crs$sample,]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="No",]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="Yes",]$WindDir9am)))

# Sort the entries.

ord <- order(ds[1,], decreasing=TRUE)

# Plot the data.

bp <-  barplot2(ds[,ord], beside=TRUE, ylab="Frequency", xlab="WindDir9am", ylim=c(0, 40), col=colorspace::rainbow_hcl(3))

# Add a legend to the plot.

legend("topright", bty="n", c("All","No","Yes"),  fill=colorspace::rainbow_hcl(3))

# Add a title to the plot.

title(main="Distribution of WindDir9am (sample)\nby RainTomorrow",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

#============================================================
# Rattle timestamp: 2018-01-29 18:13:37 x86_64-apple-darwin15.6.0 

# Dot Plot 

# Generate the summary data for the plot.

ds <- rbind(summary(na.omit(crs$dataset[crs$sample,]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="No",]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="Yes",]$WindDir9am)))

# Sort the entries.

ord <- order(ds[1,], decreasing=TRUE)

# Plot the data.

dotchart(ds[nrow(ds):1,ord], main="Distribution of WindDir9am (sample)\nby RainTomorrow", sub="Rattle 2018-Jan-29 18:13:37 rohitravishankar", col=rev(colorspace::rainbow_hcl(3)), labels="", xlab="Frequency", ylab="WindDir9am", pch=c(1:2, 19))

# Add a legend.

legend("bottomright", bty="n", c("All","No","Yes"), col=colorspace::rainbow_hcl(3), pch=c(19, 2:1))

#============================================================
# Rattle timestamp: 2018-01-29 18:13:44 x86_64-apple-darwin15.6.0 

# Dot Plot 

# Generate the summary data for the plot.

ds <- rbind(summary(na.omit(crs$dataset[crs$sample,]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="No",]$WindDir9am)),
    summary(na.omit(crs$dataset[crs$sample,][crs$dataset[crs$sample,]$RainTomorrow=="Yes",]$WindDir9am)))

# Sort the entries.

ord <- order(ds[1,], decreasing=TRUE)

# Plot the data.

dotchart(ds[nrow(ds):1,ord], main="Distribution of WindDir9am (sample)\nby RainTomorrow", sub="Rattle 2018-Jan-29 18:13:44 rohitravishankar", col=rev(colorspace::rainbow_hcl(3)), labels="", xlab="Frequency", ylab="WindDir9am", pch=c(1:2, 19))

# Add a legend.

legend("bottomright", bty="n", c("All","No","Yes"), col=colorspace::rainbow_hcl(3), pch=c(19, 2:1))

#============================================================
# Rattle timestamp: 2018-01-29 18:13:45 x86_64-apple-darwin15.6.0 

# Mosaic Plot 

# Generate the table data for plotting.

ds <- table(crs$dataset[crs$sample,]$WindDir9am, crs$dataset[crs$sample,]$RainTomorrow)

# Sort the entries.

ord <- order(apply(ds, 1, sum), decreasing=TRUE)

# Plot the data.

mosaicplot(ds[ord,], main="Mosaic of WindDir9am (sample)
by RainTomorrow", sub="Rattle 2018-Jan-29 18:13:45 rohitravishankar", color=colorspace::rainbow_hcl(3)[-1], cex=0.7, xlab="WindDir9am", ylab="RainTomorrow")

#============================================================
# Rattle timestamp: 2018-01-29 18:14:00 x86_64-apple-darwin15.6.0 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 366 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 256 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 54 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 56 observations

# The following variable selections have been noted.

crs$input <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustDir", "WindGustSpeed", "WindDir9am",
     "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am",
     "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am",
     "Cloud3pm", "Temp9am", "Temp3pm", "RainToday")

crs$numeric <- c("MinTemp", "MaxTemp", "Rainfall", "Evaporation",
     "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm",
     "Humidity9am", "Humidity3pm", "Pressure9am", "Pressure3pm",
     "Cloud9am", "Cloud3pm", "Temp9am", "Temp3pm")

crs$categoric <- c("WindGustDir", "WindDir9am", "WindDir3pm", "RainToday")

crs$target  <- "RainTomorrow"
crs$risk    <- "RISK_MM"
crs$ident   <- "Date"
crs$ignore  <- "Location"
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2018-01-29 18:14:03 x86_64-apple-darwin15.6.0 

# Decision Tree 

# The 'rpart' package provides the 'rpart' function.

library(rpart, quietly=TRUE)

# Reset the random number seed to obtain the same results each time.

set.seed(crv$seed)

# Build the Decision Tree model.

crs$rpart <- rpart(RainTomorrow ~ .,
    data=crs$dataset[crs$train, c(crs$input, crs$target)],
    method="class",
    parms=list(split="information"),
    control=rpart.control(usesurrogate=0, 
        maxsurrogate=0))

# Generate a textual view of the Decision Tree model.

print(crs$rpart)
printcp(crs$rpart)
cat("\n")

# Time taken: 0.01 secs

#============================================================
# Rattle timestamp: 2018-01-29 18:14:09 x86_64-apple-darwin15.6.0 

# Evaluate model performance on the validation dataset. 

# Generate an Error Matrix for the Decision Tree model.

# Obtain the response from the Decision Tree model.

crs$pr <- predict(crs$rpart, newdata=crs$dataset[crs$validate, c(crs$input, crs$target)], type="class")

# Generate the confusion matrix showing counts.

rattle::errorMatrix(crs$dataset[crs$validate, c(crs$input, crs$target)]$RainTomorrow, crs$pr, count=TRUE)

# Generate the confusion matrix showing proportions.

(per <- rattle::errorMatrix(crs$dataset[crs$validate, c(crs$input, crs$target)]$RainTomorrow, crs$pr))

# Calculate the overall error percentage.

cat(100-sum(diag(per), na.rm=TRUE))

# Calculate the averaged class error percentage.

cat(mean(per[,"Error"], na.rm=TRUE))
